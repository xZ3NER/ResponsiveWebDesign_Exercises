html {
    box-sizing: border-box;
}

body {
    font-family: sans-serif;
    color: #0a0a23;
}

section {
    max-width: 40rem;
    margin: 0 auto;
    border: 2px solid #d0d0d5;
}

h1 {
    max-width: 37.25rem;
    margin: 0 auto;
    padding: 1.5rem 1.25rem;
}

h1 .flex {
    display: flex;
    flex-direction: column-reverse;
    gap: 1rem;
}

h1 .flex span:first-of-type {
    font-size: 0.7em;
}

h1 .flex span:last-of-type {
    font-size: 1.2em;
}

table {
    border-collapse: collapse;
    border: 0;
    width: 100%;
    /* Offset an element from its normal position within the 
       document without changing the layout around it */
    position: relative;
    margin: 3rem auto 0 auto;
}

table caption {
    color: #356eaf;
    font-size: 1.3em;
    font-weight: normal;
    /* Like relative, but you can position anywhere using top/left...
       (uses a space on that new position) */
    position: absolute;
    top: -2.25rem;
    left: 0.5rem;
}

tbody td {
    width: 100vw;
    max-width: 4rem;
    min-width: 4rem;
}

tbody th {
    width: calc(100% - 12rem);
}

tr[class="total"] {
    border-bottom: 4px double #0a0a23;
    font-weight: bold;
}

tr[class="total"] th {
    padding: 0.5rem 0 0.25rem 0.5rem;
    text-align: left;
}

tr.total td {
    text-align: right;
    padding: 0 0.25rem;
}

tr.total td:nth-of-type(3) {
    padding: 0.5rem;
}

tr.total:hover {
    background-color: #99c9ff;
}

td[class="current"] {
    font-style: italic;
}

/* It's like tr.data selector */
tr[class="data"] {
    background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}

tr.data th {
    text-align: left;
    padding-top: 0.3rem;
    padding-left: 0.5rem;
}

tr.data th .description {
    display: block;
    font-style: italic;
    font-weight: normal;
    padding: 1rem 0 0.75rem;
    margin-right: -13.5rem;
}

tr.data td {
    vertical-align: top;
    text-align: right;
    padding: 0.3rem 0.25rem 0;
}

tr.data td:last-of-type {
    padding-right: 0.5rem;
}

#years {
    /* Sticky elements will scroll with the page until they reach 
       a certain point, at which point they will become fixed. */
    position: sticky;
    top: 0;
    display: flex;
    justify-content: flex-end;
    z-index: 999;
    margin: 0 -2px;
    padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;

    color: #fff;
    background-color: #0a0a23;
}

/* Target any span element that has a class attribute set, 
   regardless of the attribute's value */
#years span[class] {
    font-weight: bold;
    width: 4.5rem;
    text-align: right;
}

.table-wrap {
    padding: 0 0.75rem 1.5rem 0.75rem;
}

/* Select any span element whose class includes sr-only */
/* We will use 'sr-only' class to make elements with this 
   class completely hidden from the visual page, 
   but still be announced by screen readers */
span[class~="sr-only"] {
    /* !important keyword to ensure these properties are 
        always applied, regardless of order or specificity. */
    border: 0 !important;
    /* Define the visible portions of an element */
    clip: rect(1px, 1px, 1px, 1px) !important;
    /* Determines the shape the clip property should take */
    clip-path: inset(50%) !important;
    -webkit-clip-path: inset(50%) !important;

    /* Make not visible and out of our document flow */
    width: 1px !important;
    height: 1px !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    position: absolute !important;
    padding: 0 !important;
    margin: -1px !important;
}